{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cache library with LRU/LFU/FIFO policies support Base class Cache class: caches::fixed_sized_cache Cache policy classes Cache policy abstract class: caches::ICachePolicy LRU cache policy class: caches::LRUCachePolicy LFU cache policy class: caches::LFUCachePolicy FIFO cache policy class: caches::FIFOCachePolicy No policy cache class: caches::NoCachePolicy Useful links Cache replacement policies","title":"Cache library"},{"location":"#cache-library-with-lrulfufifo-policies-support","text":"","title":"Cache library with LRU/LFU/FIFO policies support"},{"location":"#base-class","text":"Cache class: caches::fixed_sized_cache","title":"Base class"},{"location":"#cache-policy-classes","text":"Cache policy abstract class: caches::ICachePolicy LRU cache policy class: caches::LRUCachePolicy LFU cache policy class: caches::LFUCachePolicy FIFO cache policy class: caches::FIFOCachePolicy No policy cache class: caches::NoCachePolicy","title":"Cache policy classes"},{"location":"#useful-links","text":"Cache replacement policies","title":"Useful links"},{"location":"LICENSE/","text":"BSD 3-Clause License Copyright (c) 2015-2021, Vladimir Petrigo All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"api/cache/fixed_sized_cache/","text":"caches::fixed_sized_cache Fixed sized cache that can be used with different policy types (e.g. LRU, FIFO, LFU) More... #include <cache.hpp> Public Types Name using typename std::unordered_map< Key, Value >::iterator iterator using typename std::unordered_map< Key, Value >::const_iterator const_iterator using typename std::lock_guard< std::mutex > operation_guard using typename std::function< void(const Key &key, const Value &value)> Callback Public Functions Name fixed_sized_cache (size_t max_size, const Policy< Key > policy =Policy< Key >{}, Callback OnErase = {}) Fixed sized cache constructor. ~fixed_sized_cache () void Put (const Key & key, const Value & value) Put element into the cache. std::pair< const_iterator, bool > TryGet (const Key & key) const Try to get an element by the given key from the cache. const Value & Get (const Key & key) const Get element from the cache if present. bool Cached (const Key & key) const Check whether the given key is presented in the cache. std::size_t Size () const Get number of elements in cache. bool Remove (const Key & key) Protected Functions Name void Clear () const_iterator begin () const const_iterator end () const void Insert (const Key & key, const Value & value) void Erase (const_iterator elem) void Erase (const Key & key) void Update (const Key & key, const Value & value) const_iterator FindElem (const Key & key) const std::pair< const_iterator, bool > GetInternal (const Key & key) const Detailed Description template < typename Key , typename Value , template < typename > class Policy = NoCachePolicy > class caches :: fixed_sized_cache ; Fixed sized cache that can be used with different policy types (e.g. LRU, FIFO, LFU) Template Parameters : Key Type of a key (should be hashable) Value Type of a value stored in the cache Policy Type of a policy to be used with the cache Public Types Documentation using iterator using caches :: fixed_sized_cache < Key , Value , Policy >:: iterator = typename std :: unordered_map < Key , Value >:: iterator ; using const_iterator using caches :: fixed_sized_cache < Key , Value , Policy >:: const_iterator = typename std :: unordered_map < Key , Value >:: const_iterator ; using operation_guard using caches :: fixed_sized_cache < Key , Value , Policy >:: operation_guard = typename std :: lock_guard < std :: mutex > ; using Callback using caches :: fixed_sized_cache < Key , Value , Policy >:: Callback = typename std :: function < void ( const Key & key , const Value & value ) > ; Public Functions Documentation function fixed_sized_cache inline explicit fixed_sized_cache ( size_t max_size , const Policy < Key > policy = Policy < Key > {}, Callback OnErase = []( const Key & , const Value & ) {} ) Fixed sized cache constructor. Parameters : max_size Maximum size of the cache policy Cache policy to use OnErase Callback function to be called when cache's element get erased Exceptions : std::invalid_argument function ~fixed_sized_cache inline ~ fixed_sized_cache () function Put inline void Put ( const Key & key , const Value & value ) Put element into the cache. Parameters : key Key value to use value Value to assign to the given key function TryGet inline std :: pair < const_iterator , bool > TryGet ( const Key & key ) const Try to get an element by the given key from the cache. Parameters : key Get element by key Return : Pair of iterator that points to the element and boolean value that shows whether get operation has been successful or not. If pair's boolean value is false, the element is not presented in the cache. If pair's boolean value is true, returned iterator can be used to get access to the element function Get inline const Value & Get ( const Key & key ) const Get element from the cache if present. Parameters : key Get element by key Exceptions : std::range_error Return : Reference to the value stored by the specified key in the cache Warning : This method will change in the future with an optional class capabilities to avoid throwing exceptions function Cached inline bool Cached ( const Key & key ) const Check whether the given key is presented in the cache. Parameters : key Element key to check Returns : true Element is presented in the case false Element is not presented in the case function Size inline std :: size_t Size () const Get number of elements in cache. Return : Number of elements currently stored in the cache function Remove inline bool Remove ( const Key & key ) Parameters : key Key parameter Returns : true if an element specified by key was found and deleted false if an element is not present in a cache Remove an element specified by key Protected Functions Documentation function Clear inline void Clear () function begin inline const_iterator begin () const function end inline const_iterator end () const function Insert inline void Insert ( const Key & key , const Value & value ) function Erase inline void Erase ( const_iterator elem ) function Erase inline void Erase ( const Key & key ) function Update inline void Update ( const Key & key , const Value & value ) function FindElem inline const_iterator FindElem ( const Key & key ) const function GetInternal inline std :: pair < const_iterator , bool > GetInternal ( const Key & key ) const","title":"Cache"},{"location":"api/cache/fixed_sized_cache/#cachesfixed_sized_cache","text":"Fixed sized cache that can be used with different policy types (e.g. LRU, FIFO, LFU) More... #include <cache.hpp>","title":"caches::fixed_sized_cache"},{"location":"api/cache/fixed_sized_cache/#public-types","text":"Name using typename std::unordered_map< Key, Value >::iterator iterator using typename std::unordered_map< Key, Value >::const_iterator const_iterator using typename std::lock_guard< std::mutex > operation_guard using typename std::function< void(const Key &key, const Value &value)> Callback","title":"Public Types"},{"location":"api/cache/fixed_sized_cache/#public-functions","text":"Name fixed_sized_cache (size_t max_size, const Policy< Key > policy =Policy< Key >{}, Callback OnErase = {}) Fixed sized cache constructor. ~fixed_sized_cache () void Put (const Key & key, const Value & value) Put element into the cache. std::pair< const_iterator, bool > TryGet (const Key & key) const Try to get an element by the given key from the cache. const Value & Get (const Key & key) const Get element from the cache if present. bool Cached (const Key & key) const Check whether the given key is presented in the cache. std::size_t Size () const Get number of elements in cache. bool Remove (const Key & key)","title":"Public Functions"},{"location":"api/cache/fixed_sized_cache/#protected-functions","text":"Name void Clear () const_iterator begin () const const_iterator end () const void Insert (const Key & key, const Value & value) void Erase (const_iterator elem) void Erase (const Key & key) void Update (const Key & key, const Value & value) const_iterator FindElem (const Key & key) const std::pair< const_iterator, bool > GetInternal (const Key & key) const","title":"Protected Functions"},{"location":"api/cache/fixed_sized_cache/#detailed-description","text":"template < typename Key , typename Value , template < typename > class Policy = NoCachePolicy > class caches :: fixed_sized_cache ; Fixed sized cache that can be used with different policy types (e.g. LRU, FIFO, LFU) Template Parameters : Key Type of a key (should be hashable) Value Type of a value stored in the cache Policy Type of a policy to be used with the cache","title":"Detailed Description"},{"location":"api/cache/fixed_sized_cache/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api/cache/fixed_sized_cache/#using-iterator","text":"using caches :: fixed_sized_cache < Key , Value , Policy >:: iterator = typename std :: unordered_map < Key , Value >:: iterator ;","title":"using iterator"},{"location":"api/cache/fixed_sized_cache/#using-const_iterator","text":"using caches :: fixed_sized_cache < Key , Value , Policy >:: const_iterator = typename std :: unordered_map < Key , Value >:: const_iterator ;","title":"using const_iterator"},{"location":"api/cache/fixed_sized_cache/#using-operation_guard","text":"using caches :: fixed_sized_cache < Key , Value , Policy >:: operation_guard = typename std :: lock_guard < std :: mutex > ;","title":"using operation_guard"},{"location":"api/cache/fixed_sized_cache/#using-callback","text":"using caches :: fixed_sized_cache < Key , Value , Policy >:: Callback = typename std :: function < void ( const Key & key , const Value & value ) > ;","title":"using Callback"},{"location":"api/cache/fixed_sized_cache/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/cache/fixed_sized_cache/#function-fixed_sized_cache","text":"inline explicit fixed_sized_cache ( size_t max_size , const Policy < Key > policy = Policy < Key > {}, Callback OnErase = []( const Key & , const Value & ) {} ) Fixed sized cache constructor. Parameters : max_size Maximum size of the cache policy Cache policy to use OnErase Callback function to be called when cache's element get erased Exceptions : std::invalid_argument","title":"function fixed_sized_cache"},{"location":"api/cache/fixed_sized_cache/#function-fixed_sized_cache_1","text":"inline ~ fixed_sized_cache ()","title":"function ~fixed_sized_cache"},{"location":"api/cache/fixed_sized_cache/#function-put","text":"inline void Put ( const Key & key , const Value & value ) Put element into the cache. Parameters : key Key value to use value Value to assign to the given key","title":"function Put"},{"location":"api/cache/fixed_sized_cache/#function-tryget","text":"inline std :: pair < const_iterator , bool > TryGet ( const Key & key ) const Try to get an element by the given key from the cache. Parameters : key Get element by key Return : Pair of iterator that points to the element and boolean value that shows whether get operation has been successful or not. If pair's boolean value is false, the element is not presented in the cache. If pair's boolean value is true, returned iterator can be used to get access to the element","title":"function TryGet"},{"location":"api/cache/fixed_sized_cache/#function-get","text":"inline const Value & Get ( const Key & key ) const Get element from the cache if present. Parameters : key Get element by key Exceptions : std::range_error Return : Reference to the value stored by the specified key in the cache Warning : This method will change in the future with an optional class capabilities to avoid throwing exceptions","title":"function Get"},{"location":"api/cache/fixed_sized_cache/#function-cached","text":"inline bool Cached ( const Key & key ) const Check whether the given key is presented in the cache. Parameters : key Element key to check Returns : true Element is presented in the case false Element is not presented in the case","title":"function Cached"},{"location":"api/cache/fixed_sized_cache/#function-size","text":"inline std :: size_t Size () const Get number of elements in cache. Return : Number of elements currently stored in the cache","title":"function Size"},{"location":"api/cache/fixed_sized_cache/#function-remove","text":"inline bool Remove ( const Key & key ) Parameters : key Key parameter Returns : true if an element specified by key was found and deleted false if an element is not present in a cache Remove an element specified by key","title":"function Remove"},{"location":"api/cache/fixed_sized_cache/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/cache/fixed_sized_cache/#function-clear","text":"inline void Clear ()","title":"function Clear"},{"location":"api/cache/fixed_sized_cache/#function-begin","text":"inline const_iterator begin () const","title":"function begin"},{"location":"api/cache/fixed_sized_cache/#function-end","text":"inline const_iterator end () const","title":"function end"},{"location":"api/cache/fixed_sized_cache/#function-insert","text":"inline void Insert ( const Key & key , const Value & value )","title":"function Insert"},{"location":"api/cache/fixed_sized_cache/#function-erase","text":"inline void Erase ( const_iterator elem )","title":"function Erase"},{"location":"api/cache/fixed_sized_cache/#function-erase_1","text":"inline void Erase ( const Key & key )","title":"function Erase"},{"location":"api/cache/fixed_sized_cache/#function-update","text":"inline void Update ( const Key & key , const Value & value )","title":"function Update"},{"location":"api/cache/fixed_sized_cache/#function-findelem","text":"inline const_iterator FindElem ( const Key & key ) const","title":"function FindElem"},{"location":"api/cache/fixed_sized_cache/#function-getinternal","text":"inline std :: pair < const_iterator , bool > GetInternal ( const Key & key ) const","title":"function GetInternal"},{"location":"api/policy/cache_policy_interface/","text":"caches::ICachePolicy Cache policy abstract base class. More... #include <cache_policy.hpp> Inherited by caches::FIFOCachePolicy< Key > , caches::LFUCachePolicy< Key > , caches::LRUCachePolicy< Key > , caches::NoCachePolicy< Key > Public Functions Name virtual ~ICachePolicy () =default virtual void Insert (const Key & key) =0 Handle element insertion in a cache. virtual void Touch (const Key & key) =0 Handle request to the key-element in a cache. virtual void Erase (const Key & key) =0 Handle element deletion from a cache. virtual const Key & ReplCandidate () const =0 Return a key of a replacement candidate. Detailed Description template < typename Key > class caches :: ICachePolicy ; Cache policy abstract base class. Template Parameters : Key Type of a key a policy works with Public Functions Documentation function ~ICachePolicy virtual ~ ICachePolicy () = default function Insert virtual void Insert ( const Key & key ) = 0 Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplemented by : caches::LFUCachePolicy::Insert , caches::FIFOCachePolicy::Insert , caches::LRUCachePolicy::Insert , caches::NoCachePolicy::Insert function Touch virtual void Touch ( const Key & key ) = 0 Handle request to the key-element in a cache. Parameters : key Reimplemented by : caches::FIFOCachePolicy::Touch , caches::NoCachePolicy::Touch , caches::LFUCachePolicy::Touch , caches::LRUCachePolicy::Touch function Erase virtual void Erase ( const Key & key ) = 0 Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplemented by : caches::LRUCachePolicy::Erase , caches::FIFOCachePolicy::Erase , caches::LFUCachePolicy::Erase , caches::NoCachePolicy::Erase function ReplCandidate virtual const Key & ReplCandidate () const = 0 Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplemented by : caches::FIFOCachePolicy::ReplCandidate , caches::LFUCachePolicy::ReplCandidate , caches::LRUCachePolicy::ReplCandidate , caches::NoCachePolicy::ReplCandidate","title":"Interface"},{"location":"api/policy/cache_policy_interface/#cachesicachepolicy","text":"Cache policy abstract base class. More... #include <cache_policy.hpp> Inherited by caches::FIFOCachePolicy< Key > , caches::LFUCachePolicy< Key > , caches::LRUCachePolicy< Key > , caches::NoCachePolicy< Key >","title":"caches::ICachePolicy"},{"location":"api/policy/cache_policy_interface/#public-functions","text":"Name virtual ~ICachePolicy () =default virtual void Insert (const Key & key) =0 Handle element insertion in a cache. virtual void Touch (const Key & key) =0 Handle request to the key-element in a cache. virtual void Erase (const Key & key) =0 Handle element deletion from a cache. virtual const Key & ReplCandidate () const =0 Return a key of a replacement candidate.","title":"Public Functions"},{"location":"api/policy/cache_policy_interface/#detailed-description","text":"template < typename Key > class caches :: ICachePolicy ; Cache policy abstract base class. Template Parameters : Key Type of a key a policy works with","title":"Detailed Description"},{"location":"api/policy/cache_policy_interface/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/policy/cache_policy_interface/#function-icachepolicy","text":"virtual ~ ICachePolicy () = default","title":"function ~ICachePolicy"},{"location":"api/policy/cache_policy_interface/#function-insert","text":"virtual void Insert ( const Key & key ) = 0 Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplemented by : caches::LFUCachePolicy::Insert , caches::FIFOCachePolicy::Insert , caches::LRUCachePolicy::Insert , caches::NoCachePolicy::Insert","title":"function Insert"},{"location":"api/policy/cache_policy_interface/#function-touch","text":"virtual void Touch ( const Key & key ) = 0 Handle request to the key-element in a cache. Parameters : key Reimplemented by : caches::FIFOCachePolicy::Touch , caches::NoCachePolicy::Touch , caches::LFUCachePolicy::Touch , caches::LRUCachePolicy::Touch","title":"function Touch"},{"location":"api/policy/cache_policy_interface/#function-erase","text":"virtual void Erase ( const Key & key ) = 0 Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplemented by : caches::LRUCachePolicy::Erase , caches::FIFOCachePolicy::Erase , caches::LFUCachePolicy::Erase , caches::NoCachePolicy::Erase","title":"function Erase"},{"location":"api/policy/cache_policy_interface/#function-replcandidate","text":"virtual const Key & ReplCandidate () const = 0 Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplemented by : caches::FIFOCachePolicy::ReplCandidate , caches::LFUCachePolicy::ReplCandidate , caches::LRUCachePolicy::ReplCandidate , caches::NoCachePolicy::ReplCandidate","title":"function ReplCandidate"},{"location":"api/policy/fifo_cache_policy/","text":"caches::FIFOCachePolicy FIFO (First in, first out) cache policy. More... #include <fifo_cache_policy.hpp> Inherits from caches::ICachePolicy< Key > Public Functions Name FIFOCachePolicy () =default ~FIFOCachePolicy () =default virtual void Insert (const Key & key) override Handle element insertion in a cache. virtual void Touch (const Key & key) override Handle request to the key-element in a cache. virtual void Erase (const Key & key) override Handle element deletion from a cache. virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Additional inherited members Public Functions inherited from caches::ICachePolicy< Key > Name virtual ~ICachePolicy () =default Detailed Description template < typename Key > class caches :: FIFOCachePolicy ; FIFO (First in, first out) cache policy. Template Parameters : Key Type of a key a policy works with FIFO policy in the case of replacement removes the first added element. That is, consider the following key adding sequence: A -> B -> C -> ... In the case a cache reaches its capacity, the FIFO replacement candidate policy returns firstly added element A . To show that: # New key: X Initial state : A -> B -> C -> ... Replacement candidate : A Final state : B -> C -> ... -> X -> ... An so on, the next candidate will be B , then C , etc. Public Functions Documentation function FIFOCachePolicy FIFOCachePolicy () = default function ~FIFOCachePolicy ~ FIFOCachePolicy () = default function Insert inline virtual void Insert ( const Key & key ) override Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Insert function Touch inline virtual void Touch ( const Key & key ) override Handle request to the key-element in a cache. Parameters : key Reimplements : caches::ICachePolicy::Touch function Erase inline virtual void Erase ( const Key & key ) override Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Erase function ReplCandidate inline virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplements : caches::ICachePolicy::ReplCandidate","title":"First in, first out (FIFO)"},{"location":"api/policy/fifo_cache_policy/#cachesfifocachepolicy","text":"FIFO (First in, first out) cache policy. More... #include <fifo_cache_policy.hpp> Inherits from caches::ICachePolicy< Key >","title":"caches::FIFOCachePolicy"},{"location":"api/policy/fifo_cache_policy/#public-functions","text":"Name FIFOCachePolicy () =default ~FIFOCachePolicy () =default virtual void Insert (const Key & key) override Handle element insertion in a cache. virtual void Touch (const Key & key) override Handle request to the key-element in a cache. virtual void Erase (const Key & key) override Handle element deletion from a cache. virtual const Key & ReplCandidate () const override Return a key of a replacement candidate.","title":"Public Functions"},{"location":"api/policy/fifo_cache_policy/#additional-inherited-members","text":"Public Functions inherited from caches::ICachePolicy< Key > Name virtual ~ICachePolicy () =default","title":"Additional inherited members"},{"location":"api/policy/fifo_cache_policy/#detailed-description","text":"template < typename Key > class caches :: FIFOCachePolicy ; FIFO (First in, first out) cache policy. Template Parameters : Key Type of a key a policy works with FIFO policy in the case of replacement removes the first added element. That is, consider the following key adding sequence: A -> B -> C -> ... In the case a cache reaches its capacity, the FIFO replacement candidate policy returns firstly added element A . To show that: # New key: X Initial state : A -> B -> C -> ... Replacement candidate : A Final state : B -> C -> ... -> X -> ... An so on, the next candidate will be B , then C , etc.","title":"Detailed Description"},{"location":"api/policy/fifo_cache_policy/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/policy/fifo_cache_policy/#function-fifocachepolicy","text":"FIFOCachePolicy () = default","title":"function FIFOCachePolicy"},{"location":"api/policy/fifo_cache_policy/#function-fifocachepolicy_1","text":"~ FIFOCachePolicy () = default","title":"function ~FIFOCachePolicy"},{"location":"api/policy/fifo_cache_policy/#function-insert","text":"inline virtual void Insert ( const Key & key ) override Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Insert","title":"function Insert"},{"location":"api/policy/fifo_cache_policy/#function-touch","text":"inline virtual void Touch ( const Key & key ) override Handle request to the key-element in a cache. Parameters : key Reimplements : caches::ICachePolicy::Touch","title":"function Touch"},{"location":"api/policy/fifo_cache_policy/#function-erase","text":"inline virtual void Erase ( const Key & key ) override Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Erase","title":"function Erase"},{"location":"api/policy/fifo_cache_policy/#function-replcandidate","text":"inline virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplements : caches::ICachePolicy::ReplCandidate","title":"function ReplCandidate"},{"location":"api/policy/lfu_cache_policy/","text":"caches::LFUCachePolicy LFU (Least frequently used) cache policy. More... #include <lfu_cache_policy.hpp> Inherits from caches::ICachePolicy< Key > Public Types Name using typename std::multimap< std::size_t, Key >::iterator lfu_iterator Public Functions Name LFUCachePolicy () =default ~LFUCachePolicy () override =default virtual void Insert (const Key & key) override Handle element insertion in a cache. virtual void Touch (const Key & key) override Handle request to the key-element in a cache. virtual void Erase (const Key & key) override Handle element deletion from a cache. virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Additional inherited members Public Functions inherited from caches::ICachePolicy< Key > Name virtual ~ICachePolicy () =default Detailed Description template < typename Key > class caches :: LFUCachePolicy ; LFU (Least frequently used) cache policy. Template Parameters : Key Type of a key a policy works with LFU policy in the case of replacement removes the least frequently used element. Each access to an element in the cache increments internal counter (frequency) that represents how many times that particular key has been accessed by someone. When a replacement has to occur the LFU policy just takes a look onto keys' frequencies and remove the least used one. E.g. cache of two elements where A has been accessed 10 times and B \u2013 only 2. When you want to add a key C the LFU policy returns B as a replacement candidate. Public Types Documentation using lfu_iterator using caches :: LFUCachePolicy < Key >:: lfu_iterator = typename std :: multimap < std :: size_t , Key >:: iterator ; Public Functions Documentation function LFUCachePolicy LFUCachePolicy () = default function ~LFUCachePolicy ~ LFUCachePolicy () override = default function Insert inline virtual void Insert ( const Key & key ) override Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Insert function Touch inline virtual void Touch ( const Key & key ) override Handle request to the key-element in a cache. Parameters : key Reimplements : caches::ICachePolicy::Touch function Erase inline virtual void Erase ( const Key & key ) override Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Erase function ReplCandidate inline virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplements : caches::ICachePolicy::ReplCandidate","title":"Least frequently used (LFU)"},{"location":"api/policy/lfu_cache_policy/#cacheslfucachepolicy","text":"LFU (Least frequently used) cache policy. More... #include <lfu_cache_policy.hpp> Inherits from caches::ICachePolicy< Key >","title":"caches::LFUCachePolicy"},{"location":"api/policy/lfu_cache_policy/#public-types","text":"Name using typename std::multimap< std::size_t, Key >::iterator lfu_iterator","title":"Public Types"},{"location":"api/policy/lfu_cache_policy/#public-functions","text":"Name LFUCachePolicy () =default ~LFUCachePolicy () override =default virtual void Insert (const Key & key) override Handle element insertion in a cache. virtual void Touch (const Key & key) override Handle request to the key-element in a cache. virtual void Erase (const Key & key) override Handle element deletion from a cache. virtual const Key & ReplCandidate () const override Return a key of a replacement candidate.","title":"Public Functions"},{"location":"api/policy/lfu_cache_policy/#additional-inherited-members","text":"Public Functions inherited from caches::ICachePolicy< Key > Name virtual ~ICachePolicy () =default","title":"Additional inherited members"},{"location":"api/policy/lfu_cache_policy/#detailed-description","text":"template < typename Key > class caches :: LFUCachePolicy ; LFU (Least frequently used) cache policy. Template Parameters : Key Type of a key a policy works with LFU policy in the case of replacement removes the least frequently used element. Each access to an element in the cache increments internal counter (frequency) that represents how many times that particular key has been accessed by someone. When a replacement has to occur the LFU policy just takes a look onto keys' frequencies and remove the least used one. E.g. cache of two elements where A has been accessed 10 times and B \u2013 only 2. When you want to add a key C the LFU policy returns B as a replacement candidate.","title":"Detailed Description"},{"location":"api/policy/lfu_cache_policy/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api/policy/lfu_cache_policy/#using-lfu_iterator","text":"using caches :: LFUCachePolicy < Key >:: lfu_iterator = typename std :: multimap < std :: size_t , Key >:: iterator ;","title":"using lfu_iterator"},{"location":"api/policy/lfu_cache_policy/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/policy/lfu_cache_policy/#function-lfucachepolicy","text":"LFUCachePolicy () = default","title":"function LFUCachePolicy"},{"location":"api/policy/lfu_cache_policy/#function-lfucachepolicy_1","text":"~ LFUCachePolicy () override = default","title":"function ~LFUCachePolicy"},{"location":"api/policy/lfu_cache_policy/#function-insert","text":"inline virtual void Insert ( const Key & key ) override Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Insert","title":"function Insert"},{"location":"api/policy/lfu_cache_policy/#function-touch","text":"inline virtual void Touch ( const Key & key ) override Handle request to the key-element in a cache. Parameters : key Reimplements : caches::ICachePolicy::Touch","title":"function Touch"},{"location":"api/policy/lfu_cache_policy/#function-erase","text":"inline virtual void Erase ( const Key & key ) override Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Erase","title":"function Erase"},{"location":"api/policy/lfu_cache_policy/#function-replcandidate","text":"inline virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplements : caches::ICachePolicy::ReplCandidate","title":"function ReplCandidate"},{"location":"api/policy/lru_cache_policy/","text":"caches::LRUCachePolicy LRU (Least Recently Used) cache policy. More... #include <lru_cache_policy.hpp> Inherits from caches::ICachePolicy< Key > Public Types Name using typename std::list< Key >::iterator lru_iterator Public Functions Name LRUCachePolicy () =default ~LRUCachePolicy () =default virtual void Insert (const Key & key) override Handle element insertion in a cache. virtual void Touch (const Key & key) override Handle request to the key-element in a cache. virtual void Erase (const Key & key) override Handle element deletion from a cache. virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Additional inherited members Public Functions inherited from caches::ICachePolicy< Key > Name virtual ~ICachePolicy () =default Detailed Description template < typename Key > class caches :: LRUCachePolicy ; LRU (Least Recently Used) cache policy. Template Parameters : Key Type of a key a policy works with LRU policy in the case of replacement removes the least recently used element. That is, in the case of replacement necessity, that cache policy returns a key that has not been touched recently. For example, cache maximum size is 3 and 3 elements have been added - A , B , C . Then the following actions were made: Cache placement order : A , B , C Cache elements : A , B , C # Cache access: - A touched , B touched # LRU element in the cache: C # Cache access: - B touched , C touched # LRU element in the cache: A # Put new element: D # LRU replacement candidate: A Cache elements : B , C , D Public Types Documentation using lru_iterator using caches :: LRUCachePolicy < Key >:: lru_iterator = typename std :: list < Key >:: iterator ; Public Functions Documentation function LRUCachePolicy LRUCachePolicy () = default function ~LRUCachePolicy ~ LRUCachePolicy () = default function Insert inline virtual void Insert ( const Key & key ) override Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Insert function Touch inline virtual void Touch ( const Key & key ) override Handle request to the key-element in a cache. Parameters : key Reimplements : caches::ICachePolicy::Touch function Erase inline virtual void Erase ( const Key & key ) override Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Erase function ReplCandidate inline virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplements : caches::ICachePolicy::ReplCandidate","title":"Least recently used (LRU)"},{"location":"api/policy/lru_cache_policy/#cacheslrucachepolicy","text":"LRU (Least Recently Used) cache policy. More... #include <lru_cache_policy.hpp> Inherits from caches::ICachePolicy< Key >","title":"caches::LRUCachePolicy"},{"location":"api/policy/lru_cache_policy/#public-types","text":"Name using typename std::list< Key >::iterator lru_iterator","title":"Public Types"},{"location":"api/policy/lru_cache_policy/#public-functions","text":"Name LRUCachePolicy () =default ~LRUCachePolicy () =default virtual void Insert (const Key & key) override Handle element insertion in a cache. virtual void Touch (const Key & key) override Handle request to the key-element in a cache. virtual void Erase (const Key & key) override Handle element deletion from a cache. virtual const Key & ReplCandidate () const override Return a key of a replacement candidate.","title":"Public Functions"},{"location":"api/policy/lru_cache_policy/#additional-inherited-members","text":"Public Functions inherited from caches::ICachePolicy< Key > Name virtual ~ICachePolicy () =default","title":"Additional inherited members"},{"location":"api/policy/lru_cache_policy/#detailed-description","text":"template < typename Key > class caches :: LRUCachePolicy ; LRU (Least Recently Used) cache policy. Template Parameters : Key Type of a key a policy works with LRU policy in the case of replacement removes the least recently used element. That is, in the case of replacement necessity, that cache policy returns a key that has not been touched recently. For example, cache maximum size is 3 and 3 elements have been added - A , B , C . Then the following actions were made: Cache placement order : A , B , C Cache elements : A , B , C # Cache access: - A touched , B touched # LRU element in the cache: C # Cache access: - B touched , C touched # LRU element in the cache: A # Put new element: D # LRU replacement candidate: A Cache elements : B , C , D","title":"Detailed Description"},{"location":"api/policy/lru_cache_policy/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api/policy/lru_cache_policy/#using-lru_iterator","text":"using caches :: LRUCachePolicy < Key >:: lru_iterator = typename std :: list < Key >:: iterator ;","title":"using lru_iterator"},{"location":"api/policy/lru_cache_policy/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/policy/lru_cache_policy/#function-lrucachepolicy","text":"LRUCachePolicy () = default","title":"function LRUCachePolicy"},{"location":"api/policy/lru_cache_policy/#function-lrucachepolicy_1","text":"~ LRUCachePolicy () = default","title":"function ~LRUCachePolicy"},{"location":"api/policy/lru_cache_policy/#function-insert","text":"inline virtual void Insert ( const Key & key ) override Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Insert","title":"function Insert"},{"location":"api/policy/lru_cache_policy/#function-touch","text":"inline virtual void Touch ( const Key & key ) override Handle request to the key-element in a cache. Parameters : key Reimplements : caches::ICachePolicy::Touch","title":"function Touch"},{"location":"api/policy/lru_cache_policy/#function-erase","text":"inline virtual void Erase ( const Key & key ) override Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Erase","title":"function Erase"},{"location":"api/policy/lru_cache_policy/#function-replcandidate","text":"inline virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplements : caches::ICachePolicy::ReplCandidate","title":"function ReplCandidate"},{"location":"api/policy/no_cache_policy/","text":"caches::NoCachePolicy Basic no caching policy class. More... #include <cache_policy.hpp> Inherits from caches::ICachePolicy< Key > Public Functions Name NoCachePolicy () =default ~NoCachePolicy () override =default virtual void Insert (const Key & key) override Handle element insertion in a cache. virtual void Touch (const Key & key) override Handle request to the key-element in a cache. virtual void Erase (const Key & key) override Handle element deletion from a cache. virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Additional inherited members Public Functions inherited from caches::ICachePolicy< Key > Name virtual ~ICachePolicy () =default Detailed Description template < typename Key > class caches :: NoCachePolicy ; Basic no caching policy class. Template Parameters : Key Type of a key a policy works with Preserve any key provided. Erase procedure can get rid of any added keys without specific rules: a replacement candidate will be the first element in the underlying container. As unordered container can be used in the implementation there are no warranties that the first/last added key will be erased Public Functions Documentation function NoCachePolicy NoCachePolicy () = default function ~NoCachePolicy ~ NoCachePolicy () override = default function Insert inline virtual void Insert ( const Key & key ) override Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Insert function Touch inline virtual void Touch ( const Key & key ) override Handle request to the key-element in a cache. Parameters : key Reimplements : caches::ICachePolicy::Touch function Erase inline virtual void Erase ( const Key & key ) override Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Erase function ReplCandidate inline virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplements : caches::ICachePolicy::ReplCandidate","title":"No Policy"},{"location":"api/policy/no_cache_policy/#cachesnocachepolicy","text":"Basic no caching policy class. More... #include <cache_policy.hpp> Inherits from caches::ICachePolicy< Key >","title":"caches::NoCachePolicy"},{"location":"api/policy/no_cache_policy/#public-functions","text":"Name NoCachePolicy () =default ~NoCachePolicy () override =default virtual void Insert (const Key & key) override Handle element insertion in a cache. virtual void Touch (const Key & key) override Handle request to the key-element in a cache. virtual void Erase (const Key & key) override Handle element deletion from a cache. virtual const Key & ReplCandidate () const override Return a key of a replacement candidate.","title":"Public Functions"},{"location":"api/policy/no_cache_policy/#additional-inherited-members","text":"Public Functions inherited from caches::ICachePolicy< Key > Name virtual ~ICachePolicy () =default","title":"Additional inherited members"},{"location":"api/policy/no_cache_policy/#detailed-description","text":"template < typename Key > class caches :: NoCachePolicy ; Basic no caching policy class. Template Parameters : Key Type of a key a policy works with Preserve any key provided. Erase procedure can get rid of any added keys without specific rules: a replacement candidate will be the first element in the underlying container. As unordered container can be used in the implementation there are no warranties that the first/last added key will be erased","title":"Detailed Description"},{"location":"api/policy/no_cache_policy/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/policy/no_cache_policy/#function-nocachepolicy","text":"NoCachePolicy () = default","title":"function NoCachePolicy"},{"location":"api/policy/no_cache_policy/#function-nocachepolicy_1","text":"~ NoCachePolicy () override = default","title":"function ~NoCachePolicy"},{"location":"api/policy/no_cache_policy/#function-insert","text":"inline virtual void Insert ( const Key & key ) override Handle element insertion in a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Insert","title":"function Insert"},{"location":"api/policy/no_cache_policy/#function-touch","text":"inline virtual void Touch ( const Key & key ) override Handle request to the key-element in a cache. Parameters : key Reimplements : caches::ICachePolicy::Touch","title":"function Touch"},{"location":"api/policy/no_cache_policy/#function-erase","text":"inline virtual void Erase ( const Key & key ) override Handle element deletion from a cache. Parameters : key Key that should be used by the policy Reimplements : caches::ICachePolicy::Erase","title":"function Erase"},{"location":"api/policy/no_cache_policy/#function-replcandidate","text":"inline virtual const Key & ReplCandidate () const override Return a key of a replacement candidate. Return : Replacement candidate according to selected policy Reimplements : caches::ICachePolicy::ReplCandidate","title":"function ReplCandidate"}]}